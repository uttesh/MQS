import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent


group 'com.uttesh.mqs'
version '1.0-SNAPSHOT'
apply plugin: 'java'
apply plugin : 'eclipse'     
apply plugin: "jacoco"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
repositories {
mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://download.java.net/maven/2/" }
}


jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

dependencies {
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.6.3'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.testng', name: 'testng', version: '6.14.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task copyToLib(type: Copy) {
    into 'lib'
    from configurations.runtime
}

task deleteLibs(type: Delete) {
    def dirName = "lib"
    file( dirName ).list().each{
        f -> delete "${dirName}/${f}"
    }
}

test {
   // enable TestNG support (default is JUnit)
   useTestNG()
   //afterTest { desc, result -> 
   //     logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
   // }
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.runtime.files.collect { "../lib/$it.name" }.join(' '),
        )
    }
}.dependsOn(copyToLib)

clean.dependsOn(deleteLibs)

